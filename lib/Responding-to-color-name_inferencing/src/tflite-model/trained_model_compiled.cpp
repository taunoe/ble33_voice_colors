/* Generated by Edge Impulse
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
// Generated on: 26.08.2021 17:19:27

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 1808;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[23];
TfLiteEvalTensor tflEvalTensors[23];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[11];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,650 } };
const TfArray<1, float> quant0_scale = { 1, { 0.03634154424071312, } };
const TfArray<1, int> quant0_zero = { 1, { -16 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[2] = { -1, 208, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const ALIGN(8) int32_t tensor_data2[8] = { -584, -5105, -6041, -6849, -7408, -3068, 316, -4060, };
const TfArray<1, int> tensor_dimension2 = { 1, { 8 } };
const TfArray<8, float> quant2_scale = { 8, { 0.00020358570327516645, 0.00017870499868877232, 0.0001311205851379782, 0.00013702432624995708, 0.00013333589595276862, 0.0002249889075756073, 0.00031906427466310561, 0.0001851612760219723, } };
const TfArray<8, int> quant2_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(8) int32_t tensor_data3[16] = { -324, -1841, -1794, -1745, -4395, 98, -3000, -1886, -700, -398, 774, -5009, 1366, -2486, -2939, 1371, };
const TfArray<1, int> tensor_dimension3 = { 1, { 16 } };
const TfArray<16, float> quant3_scale = { 16, { 0.00016533346206415445, 0.00019258099200669676, 0.00018432205251883715, 0.00028688085149042308, 0.0001560603705001995, 0.00016483294893987477, 0.00016725090972613543, 0.00019225550931878388, 0.00020313519053161144, 0.00015162670752033591, 0.00017396714247297496, 0.00014766218373551965, 0.00020051794126629829, 0.00021664680389221758, 0.00012625838280655444, 0.00010023855429608375, } };
const TfArray<16, int> quant3_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(8) int32_t tensor_data4[5] = { -1609, -1371, -3244, 5411, -546, };
const TfArray<1, int> tensor_dimension4 = { 1, { 5 } };
const TfArray<1, float> quant4_scale = { 1, { 0.00020847265841439366, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(8) int8_t tensor_data5[5*208] = { 
  -23, 38, -57, 24, -3, 38, -12, -1, 8, 31, 5, 60, -16, 59, -10, -12, -31, 38, -39, 18, -21, 0, 32, -5, 18, 4, -36, 29, -36, 16, -45, -6, -12, 16, -24, 30, -14, 12, 10, 37, 18, 51, -11, 17, -23, 26, -59, -12, -11, 34, -41, 33, -22, 36, 42, -14, 12, 25, 5, 28, -17, 41, -24, -11, 19, 29, -36, -10, -52, 35, 6, -40, -17, 6, 15, 25, -21, 22, -34, -23, -4, 21, -24, 46, -30, 10, -19, -54, 3, 28, 4, 37, -12, 29, -69, -11, -15, 8, -81, 25, 21, 16, -15, -29, 29, 14, 1, 15, 9, 10, -35, -24, -33, -21, -61, 12, -3, 20, -39, -42, 24, 31, 16, 14, 1, 27, 4, -14, -32, -27, -51, 32, -13, 38, -32, -94, 21, 26, -13, 22, 1, 55, -26, -40, -19, -24, -69, 40, -3, 4, -89, -25, 36, 21, -28, 41, -36, 43, -17, -1, -2, -16, -9, 14, 16, 7, -45, -6, 30, 25, -14, 22, -43, 44, -29, 6, -12, -26, -28, -8, 10, 10, -57, -9, 44, 30, -33, 46, -10, 5, -40, -3, -14, 16, 15, 3, 1, -17, 4, -12, 10, -21, -55, -3, -20, -45, -22, 15, 
  -1, -87, -6, 33, 2, 35, -107, 5, 0, -30, -5, 46, 9, -22, -33, 5, -41, -52, -45, 17, 14, 33, -95, -1, 15, -22, -3, 47, 48, 43, -28, -14, -30, -51, -21, -18, -63, 2, -82, -5, -16, -51, 10, 26, 11, 35, -35, -15, 0, -52, -107, -3, 76, 19, -81, -32, 9, 11, -3, 27, 4, 26, -40, -36, 0, 10, -70, 20, 53, -2, 15, -19, 17, -9, 9, 16, 3, 29, -52, -35, -14, 13, -19, 5, 20, -38, -1, -62, 11, 19, 9, 30, -18, 23, -70, -24, -26, 19, -44, -26, 34, -9, 27, -59, 23, 1, -29, 1, 10, 5, -46, -27, -4, 19, 22, -24, 29, 18, 36, 20, 8, 13, -30, -13, -23, 7, -11, -60, 6, 30, 0, -33, 24, 40, 41, 52, -7, 2, -9, -2, -21, 0, -44, -58, -11, 46, 34, -15, 10, 38, 45, 12, -10, 30, -28, -36, -30, -55, -12, -24, -2, 54, -16, -2, 9, 32, 46, 16, -35, 7, -22, -9, 29, -45, -35, -23, -14, 61, -84, 25, -41, 43, 50, 0, -24, 32, -18, -83, -29, -67, -15, -5, -54, -112, -68, -9, -68, 35, -33, 9, 13, 56, -44, -59, -17, -49, -21, 10, 
  4, -41, 68, -29, -37, -38, 20, 28, -58, -82, 0, -94, 68, -75, 32, 5, 28, 15, 34, -17, 4, -55, 51, 28, -56, -60, -19, -57, 23, -95, 15, -9, 9, 31, 13, -75, -34, -44, 22, 19, -45, -52, -26, -53, 42, -89, 12, -4, 6, 27, 45, -45, -92, -9, 35, 11, -25, -41, -50, -33, 26, -115, 33, -38, -40, 35, 59, -30, -42, -41, 20, -25, -29, 24, -24, -4, 27, -95, 26, -33, 24, 36, 40, -44, -48, -17, 21, -63, -22, 41, -40, -4, 70, -35, 24, -29, 33, 25, 20, 42, -57, 31, 30, 41, -34, 11, -60, -11, 43, -70, -3, -88, 24, 28, 43, 55, -42, 4, 16, 85, -83, 1, -40, -18, 9, -47, -80, -40, 17, 43, 17, 38, -14, 7, 27, 31, -63, 22, 3, -25, -22, -39, -42, 6, 22, 44, 5, -4, 13, 7, 14, 17, -64, 34, 11, -22, -13, -11, 25, -4, 49, 36, -109, 10, -11, 1, -2, 14, -81, 40, -4, 7, -23, 11, -16, -14, 33, -68, -9, -20, -34, 15, -43, 19, -56, 44, 5, -42, -8, -2, -4, -7, 37, -127, 9, -7, -1, -9, -30, 26, -12, 35, -6, -30, 1, -30, 16, -2, 
  -15, -18, -18, -31, -19, -34, 32, -21, 12, -50, 27, -62, -1, -36, -25, 9, -9, -18, 8, -19, 17, -2, 10, 0, -32, 10, 23, -70, -3, -65, 23, 9, -5, -33, -4, -22, 0, -2, 5, -15, 13, 23, 29, -57, 17, -37, 5, 14, 11, -24, 11, -6, -6, -15, -33, -2, 16, 3, 30, -51, 10, -68, 20, 27, -2, -58, 7, -15, -35, -8, -36, -7, 17, -72, 36, -43, -16, -40, 23, 33, 7, -50, -22, -26, 1, 9, -3, 20, 12, -49, 16, -41, -8, -62, 25, 49, 13, -51, 4, -22, -33, 19, -17, 21, -10, -48, 24, -47, 7, -40, 9, 34, 9, -59, -20, -60, -38, -18, -5, -26, -28, -39, 28, -33, 18, -20, 25, 22, 10, -41, -1, -33, -37, -11, -23, -8, -7, -53, 38, -40, 2, -25, 11, 42, 5, -49, -10, -32, -29, -11, 2, 0, 17, -50, 41, -11, 48, -41, 41, 25, -8, -61, 1, -33, -4, -16, -27, -33, 17, -22, 32, -8, 9, -21, 28, 29, -14, -4, -11, -2, -27, -37, -12, -19, 21, -31, 51, 4, 64, -29, 4, 5, 38, 19, -19, -8, 0, 17, 14, -25, -6, -35, 24, -13, 32, 1, 5, 22, 
  -4, 57, 35, 14, 23, -1, 16, 5, 5, 41, -15, 17, -3, 7, -7, -1, 30, 20, 3, 17, 42, -11, -4, 2, 10, 23, -1, -28, -11, -15, 11, -10, 28, 9, 12, 7, 20, 11, 31, 19, 25, 3, 1, -15, -10, -8, 10, 7, 19, 12, 33, -10, 35, -19, 33, 50, 14, -4, 3, 7, -22, 28, 12, 5, 25, 17, 23, -17, 21, 24, 12, 65, -13, -1, 0, 2, -21, 4, 22, 7, 2, 18, 21, 21, 19, 15, -20, 50, -3, -30, 1, 30, -19, 11, 12, 13, -4, 12, 15, 23, 0, -14, -17, 38, 12, -13, -8, 10, -15, -3, 20, 33, -3, 2, 12, 15, 14, -42, 3, 12, 4, -9, 1, 4, 4, -2, 46, 10, 11, 4, 11, -12, -7, -60, -13, 23, 17, -19, 6, 19, 16, 19, 3, 19, 7, -8, 38, -16, 6, -39, -3, -3, 1, -23, 16, 38, 21, 17, 15, 20, 21, 8, 27, 16, 2, -10, 2, -2, 6, -29, -2, 15, 14, -24, 14, 14, -9, -12, 35, 1, 15, -26, 16, 3, 26, -33, 9, 22, 6, 16, 7, 5, -5, 21, 18, 23, 15, -34, 4, -14, -10, -57, 12, 58, 3, 41, 3, 7, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 5,208 } };
const TfArray<1, float> quant5_scale = { 1, { 0.0080113988369703293, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(8) int8_t tensor_data6[8*1*3*13] = { 
  /* [0][0][][] */ -120,127,0,15,31,10,-31,-24,12,-5,-32,-15,5, 124,-104,-103,-42,-7,-16,-33,-13,38,21,-29,-3,30, -18,71,-51,-24,23,38,-7,-6,18,-1,3,-36,-3, 
  /* [1][0][][] */ 18,68,103,-6,-45,26,-42,-100,39,9,23,29,-22, 6,111,34,6,-11,50,-53,-77,31,4,12,32,-21, 36,127,21,29,-29,33,-22,-83,36,-35,-8,22,-6, 
  /* [2][0][][] */ 36,48,-71,43,-66,-94,94,-20,-49,15,-7,29,-49, 27,50,-57,77,-108,-99,99,8,-79,0,82,-30,22, 9,76,-31,104,-127,-54,41,1,-44,39,29,-46,66, 
  /* [3][0][][] */ -22,55,-102,-7,60,-24,-50,-4,99,64,-107,51,44, 11,53,-127,-29,72,-4,-50,2,105,24,-114,13,41, 8,12,-116,-42,100,-38,2,-2,102,17,-92,-9,45, 
  /* [4][0][][] */ 53,58,-42,-86,-29,15,59,71,-83,-74,16,50,-11, 97,71,-46,-34,11,-18,16,89,-76,-98,-23,28,-24, 85,84,-85,-2,58,6,-16,82,-34,-127,36,20,56, 
  /* [5][0][][] */ 16,-95,16,-17,20,-31,32,-2,-4,-12,11,-30,15, 46,-50,65,-30,47,-36,29,3,14,17,14,-16,8, 127,-67,-11,-14,25,-31,3,-21,11,-7,6,-12,5, 
  /* [6][0][][] */ -20,-6,-27,11,8,-22,13,7,1,11,16,13,5, -55,0,24,4,0,-11,7,13,11,-2,-10,-18,-33, -127,-38,-38,-13,4,3,17,-10,0,3,-16,8,23, 
  /* [7][0][][] */ 14,-29,66,62,2,-23,28,-9,-7,38,-20,-8,-14, 15,-36,94,27,-20,-21,14,-6,-20,37,7,-3,-40, -38,-28,127,-2,-35,-68,6,-15,-4,18,-3,23,-30, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 8,1,3,13 } };
const TfArray<8, float> quant6_scale = { 8, { 0.0056020100601017475, 0.004917374812066555, 0.0036080081481486559, 0.0037704596761614084, 0.0036689660046249628, 0.0061909561045467854, 0.0087796011939644814, 0.0050950306467711926, } };
const TfArray<8, int> quant6_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(8) int8_t tensor_data7[16*1*3*8] = { 
  /* [0][0][][] */ -10,-95,46,48,19,-122,-13,-72, 9,-87,16,-6,-29,-127,-21,-77, 3,-87,-23,27,-53,-8,41,-75, 
  /* [1][0][][] */ -54,78,15,-113,-75,-71,-29,34, -52,-20,12,-45,-3,-74,-127,8, 6,59,46,16,23,-74,-85,-35, 
  /* [2][0][][] */ -23,92,-44,-21,-21,82,-88,-34, -57,-23,-35,-51,-51,-9,-57,-5, -95,20,-14,-127,-57,10,10,18, 
  /* [3][0][][] */ -47,-27,5,-72,-15,31,-1,7, -21,-71,9,-45,-8,0,-10,-7, -31,-127,39,-16,-20,14,36,-26, 
  /* [4][0][][] */ -41,-17,127,77,12,-60,-57,4, -119,3,0,-27,-36,-15,-62,37, -85,18,28,-65,-90,61,-91,58, 
  /* [5][0][][] */ -19,-123,-28,-31,127,-16,-5,-23, -17,-117,-54,-88,-28,-23,-22,-2, -28,-119,-56,-91,65,-10,23,12, 
  /* [6][0][][] */ -65,-13,30,-81,-127,41,-60,47, -61,-23,-21,-58,-40,-20,-74,13, 24,86,-7,4,92,-68,-116,15, 
  /* [7][0][][] */ 1,-102,12,29,36,-43,-6,-96, -3,-127,-71,1,-26,-40,64,-101, -10,-93,-107,-7,-71,-37,19,-46, 
  /* [8][0][][] */ -54,-18,56,-85,10,-17,-2,55, -65,-32,-35,-61,-9,4,7,11, -55,-23,-34,-127,-86,21,4,52, 
  /* [9][0][][] */ -37,-42,56,-68,43,-92,-84,-106, -47,-71,13,-125,48,-101,-8,-102, -107,-127,74,-120,62,-109,14,-32, 
  /* [10][0][][] */ -32,-17,-23,9,-3,-30,-6,-16, 127,-10,-17,-17,-20,15,-10,-25, -6,-12,-6,-28,-6,-38,-6,-21, 
  /* [11][0][][] */ 7,-33,7,97,-23,-111,-12,-93, 15,97,-21,-10,1,-127,-88,-65, 1,18,12,63,22,-126,-83,-76, 
  /* [12][0][][] */ 68,23,-75,18,-48,52,-35,-42, 14,-4,-67,-17,-52,-20,-24,-52, -23,14,-127,-24,-66,-7,-44,8, 
  /* [13][0][][] */ 10,33,-51,64,-1,-32,-106,-45, 4,-24,-56,-18,-7,-19,-91,-127, -1,-4,-9,50,28,12,-89,-94, 
  /* [14][0][][] */ -75,-60,-71,-64,-19,127,26,10, 3,-31,-98,-2,67,-17,-25,-38, 24,-11,-95,21,54,120,-104,-30, 
  /* [15][0][][] */ 70,-21,-32,-8,-95,-106,-10,17, -22,-26,-57,-34,-105,83,127,20, 46,-32,-13,-45,13,59,-41,16, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 16,1,3,8 } };
const TfArray<16, float> quant7_scale = { 16, { 0.0051048062741756439, 0.0059460960328578949, 0.0056910943239927292, 0.0088576814159750938, 0.0048184916377067566, 0.005089352373033762, 0.005164009053260088, 0.0059360465966165066, 0.0062719653360545635, 0.0046815988607704639, 0.005371378269046545, 0.0045591909438371658, 0.0061911558732390404, 0.0066891475580632687, 0.0038983309641480446, 0.0030949474312365055, } };
const TfArray<16, int> quant7_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(8) int32_t tensor_data8[4] = { 1, 1, 50, 13, };
const TfArray<1, int> tensor_dimension8 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data9[4] = { 1, 50, 1, 8, };
const TfArray<1, int> tensor_dimension9 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data10[4] = { 1, 1, 25, 8, };
const TfArray<1, int> tensor_dimension10 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data11[4] = { 1, 25, 1, 16, };
const TfArray<1, int> tensor_dimension11 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,1,50,13 } };
const TfArray<1, float> quant12_scale = { 1, { 0.03634154424071312, } };
const TfArray<1, int> quant12_zero = { 1, { -16 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,1,50,8 } };
const TfArray<1, float> quant13_scale = { 1, { 0.032387804239988327, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,50,1,8 } };
const TfArray<1, float> quant14_scale = { 1, { 0.032387804239988327, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,25,1,8 } };
const TfArray<1, float> quant15_scale = { 1, { 0.032387804239988327, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,25,8 } };
const TfArray<1, float> quant16_scale = { 1, { 0.032387804239988327, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,25,16 } };
const TfArray<1, float> quant17_scale = { 1, { 0.026022003963589668, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,25,1,16 } };
const TfArray<1, float> quant18_scale = { 1, { 0.026022003963589668, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,13,1,16 } };
const TfArray<1, float> quant19_scale = { 1, { 0.026022003963589668, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<2, int> tensor_dimension20 = { 2, { 1,208 } };
const TfArray<1, float> quant20_scale = { 1, { 0.026022003963589668, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<2, int> tensor_dimension21 = { 2, { 1,5 } };
const TfArray<1, float> quant21_scale = { 1, { 0.12310302257537842, } };
const TfArray<1, int> quant21_zero = { 1, { 16 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<2, int> tensor_dimension22 = { 2, { 1,5 } };
const TfArray<1, float> quant22_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,8 } };
const TfArray<1, int> outputs0 = { 1, { 12 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 12,6,2 } };
const TfArray<1, int> outputs1 = { 1, { 13 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 13,9 } };
const TfArray<1, int> outputs2 = { 1, { 14 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 14 } };
const TfArray<1, int> outputs3 = { 1, { 15 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 15,10 } };
const TfArray<1, int> outputs4 = { 1, { 16 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 16,7,3 } };
const TfArray<1, int> outputs5 = { 1, { 17 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 17,11 } };
const TfArray<1, int> outputs6 = { 1, { 18 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 18 } };
const TfArray<1, int> outputs7 = { 1, { 19 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 19,1 } };
const TfArray<1, int> outputs8 = { 1, { 20 } };
const TfLiteFullyConnectedParams opdata9 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs9 = { 3, { 20,5,4 } };
const TfArray<1, int> outputs9 = { 1, { 21 } };
const TfLiteSoftmaxParams opdata10 = { 1 };
const TfArray<1, int> inputs10 = { 1, { 21 } };
const TfArray<1, int> outputs10 = { 1, { 22 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 656, (TfLiteIntArray*)&tensor_dimension0, 650, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 1040, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 312, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension12, 650, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 656, (TfLiteIntArray*)&tensor_dimension13, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension15, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension17, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension19, 208, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 208, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 208, (TfLiteIntArray*)&tensor_dimension21, 5, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 5, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers.push_back(ptr);
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    return kTfLiteError;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 23;
  for(size_t i = 0; i < 23; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for(size_t i = 0; i < 11; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 11; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  22, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 11; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
