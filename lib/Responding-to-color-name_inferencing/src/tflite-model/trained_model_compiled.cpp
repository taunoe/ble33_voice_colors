/* Generated by Edge Impulse
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
// Generated on: 30.08.2021 17:24:05

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 2304;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[23];
TfLiteEvalTensor tflEvalTensors[23];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[11];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,800 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0033854166977107525, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[2] = { -1, 160, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const ALIGN(8) int32_t tensor_data2[16] = { 3696, -5142, 918, -2193, -251, -3351, -2975, -3346, 7630, -1018, -106, -1322, 2199, 4356, 5716, 5907, };
const TfArray<1, int> tensor_dimension2 = { 1, { 16 } };
const TfArray<16, float> quant2_scale = { 16, { 2.7450550987850875e-05, 1.7933758499566466e-05, 3.0699207854922861e-05, 2.6143761715502478e-05, 1.6163394320756197e-05, 2.7412514100433327e-05, 2.771897561615333e-05, 2.483484240656253e-05, 2.4970042431959882e-05, 1.8749627997749485e-05, 1.8037442714557983e-05, 2.2561514924746007e-05, 1.5634655937901698e-05, 2.0281400793464854e-05, 2.4286855477839708e-05, 1.3588390174845699e-05, } };
const TfArray<16, int> quant2_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(8) int32_t tensor_data3[32] = { 963, -1433, -1172, -706, 485, 938, -1886, -907, 1282, -132, 917, 190, 101, -689, 155, -520, -396, 349, -718, -1185, 1222, -797, 162, 235, -1012, 177, 281, -383, -938, -211, 774, -388, };
const TfArray<1, int> tensor_dimension3 = { 1, { 32 } };
const TfArray<32, float> quant3_scale = { 32, { 0.00011811946023954079, 0.00011456612264737487, 0.00014430769078899175, 0.00012740204692818224, 0.00013635102368425578, 0.00015282868116628379, 0.00011313577851979062, 0.00016964030510280281, 0.00010356737038819119, 0.00019947014516219497, 0.00010548986028879881, 0.0001588321611052379, 0.00013078030315227807, 9.1090121713932604e-05, 0.00012170779518783092, 0.00015598304162267596, 0.00010512908193049952, 0.00010818996815942228, 0.00012483990576583892, 0.00011804208043031394, 0.00017287117952946573, 0.00012252350279595703, 0.00017968565225601196, 0.0001861935161286965, 0.00011730938422260806, 0.00015499611617997289, 0.00019806640921160579, 0.00011021879618056118, 0.00012021684233332053, 0.0001409427059115842, 0.00011627851199591532, 0.00015258404891937971, } };
const TfArray<32, int> quant3_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(8) int32_t tensor_data4[5] = { 604, -1207, -314, 2464, -1339, };
const TfArray<1, int> tensor_dimension4 = { 1, { 5 } };
const TfArray<1, float> quant4_scale = { 1, { 0.00022793658718001097, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(8) int8_t tensor_data5[5*160] = { 
  -13, 11, -24, 6, 13, 23, 9, -43, -8, -38, -42, 28, 3, -41, -28, -23, -31, 13, -12, 14, 7, -10, 2, 4, -15, -2, -28, -34, -60, 2, 10, -5, -26, 13, -26, 19, 7, 21, 22, -22, -15, 1, 16, 22, -23, 10, 18, -49, 20, 24, -39, -24, 28, 6, 36, -3, 7, -11, -44, 18, -55, 16, -7, -4, -40, 2, -33, 11, 16, 29, 18, -14, -21, -40, 32, 18, -29, 3, 16, -59, 27, 29, -70, -21, 27, 6, 1, -16, -24, -33, -58, 34, -4, 17, -30, -17, -2, -33, -7, 28, 21, -31, -37, -32, -14, -51, 16, 5, 0, -9, 19, -39, 15, 15, -35, -13, 40, 6, -5, -22, -47, -17, 10, 13, 29, -16, 9, -58, -5, -65, -17, 5, 3, -17, -34, -24, -9, -50, 22, -27, 23, 14, -1, -23, 14, 12, 6, -5, 23, -13, -127, -16, -14, 9, 11, -3, 36, -29, -3, -32, 
  -34, -49, 9, -4, 17, -9, -79, -37, 1, -26, 14, -26, -20, 26, -33, -28, -31, 32, -35, -21, -16, 15, -66, 25, -52, 11, -45, 28, -10, 11, -35, 13, -28, -13, 25, -15, 9, -58, -72, -41, -3, -21, 25, -56, -7, 16, -68, -79, 30, 21, -43, 4, 19, 13, -68, 30, -18, 26, -43, -11, 51, 12, 10, 16, -13, 11, 35, -33, 16, -51, -37, -40, -29, 24, 19, 14, -51, 11, -43, -45, 23, 9, -25, 15, 20, 12, 4, 19, 26, 13, -9, -4, 18, 11, -26, 20, -52, 26, -11, -34, -58, -71, -21, -31, -45, 45, -21, 22, -27, 1, -52, -22, 5, -11, -47, 9, 16, -23, 36, 32, 21, -1, -40, -65, 19, 15, -45, -11, -7, 23, -10, -8, -96, -60, -22, -27, -21, 45, -15, 37, -38, 18, -26, -33, -2, -12, -33, 12, 15, -33, 49, 32, 28, -28, -4, -11, 0, 17, -2, -57, 
  -14, 31, -71, -34, -84, 18, 31, 30, -30, -26, -42, -41, 11, -94, 25, 32, -54, -33, 25, 20, -9, -85, -47, -50, 10, -91, 33, -60, 18, 3, -19, -50, 33, 13, -44, -49, -104, 15, 22, 25, -50, 45, -57, 9, -5, -70, 0, 27, -76, -58, 25, 18, 27, -66, 43, 26, 26, -79, 31, -33, -10, 13, -12, -43, -6, 24, -36, -39, -98, -5, 23, 25, -62, 18, -49, 26, -38, 6, -18, 13, -45, -27, 15, 25, 22, -54, 17, 22, 21, -50, 26, -56, 0, 8, -55, -8, -20, 20, -27, -25, -109, -56, 23, 17, 3, 43, -53, 30, -15, -7, -48, 5, -21, -33, -9, 10, 17, -53, 35, 40, 16, -20, -10, -40, 5, 2, 6, -39, 0, -11, -17, -47, -62, 21, -43, -34, -15, 17, -26, 36, -25, 4, -30, -25, -7, -13, -33, -4, 22, -40, 42, 26, 5, -17, -12, -47, -14, -57, 17, -15, 
  30, -33, 45, 1, -33, -29, -26, 6, 15, -34, 35, -22, 30, 17, -4, -12, 28, -14, 7, -87, -49, 10, 44, -8, -32, 23, 25, -31, -10, -88, 35, -21, 17, -64, 2, -21, -76, -43, -8, 9, 39, -19, 4, -53, 12, -23, -3, 17, 8, -51, 15, -87, -16, 3, -13, -30, -29, 4, 21, -8, -35, -44, 18, -12, 29, -52, -5, -20, -54, 1, -5, 3, 23, -36, -11, -57, 21, -44, 26, 5, -29, -36, 21, -59, -101, -6, -12, -33, -54, 20, 19, -8, -44, -51, 18, -31, 22, -40, -13, -1, -30, 11, 8, 24, 44, -43, -4, -54, 31, -19, 2, 9, -26, -23, 28, -62, -39, -6, -10, -18, -47, 7, 10, -21, -79, -26, 27, -2, 23, -8, 9, -13, -37, 8, 1, 24, 28, -37, 12, -31, 21, 14, 7, 20, -4, -26, 24, -60, -32, 19, 21, -54, -49, 9, 29, 8, -31, -41, 26, -7, 
  -23, 19, 7, 9, -4, -12, 7, 17, -20, 55, 4, 9, -9, 34, -8, 4, 29, -12, 5, 31, 68, -6, -14, -5, 23, 13, -29, 20, 31, 3, -14, 22, -7, 5, 20, 2, 1, 33, 14, 21, 7, -6, -17, 2, 19, 11, -6, 19, -14, 10, 17, 12, -36, -8, 12, -3, 5, 24, -6, 11, 12, 14, 0, 5, 12, 10, 32, 7, 3, 17, 4, 16, 17, -17, 1, -11, 8, 8, 5, 6, -7, 12, 11, 14, -28, 7, -18, -8, 6, 14, -8, 31, 1, 7, 11, 24, 4, -1, 9, 22, 14, 67, 6, 23, 10, -41, -10, -21, 14, -3, 15, 14, -13, 3, 29, -1, -60, 6, -37, -19, -17, 14, -1, 11, -5, 9, 16, 38, -8, 25, 4, 13, 47, 18, 43, 29, -12, -18, -12, -34, -10, -8, -11, 35, -15, 8, 31, 7, -33, 19, -27, -24, -2, 19, -15, 38, -3, 58, -1, 82, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 5,160 } };
const TfArray<1, float> quant5_scale = { 1, { 0.011588233523070812, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(8) int8_t tensor_data6[16*1*3*40] = { 
  /* [0][0][][] */ 76,-14,19,70,76,-5,42,35,22,-13,-23,-13,-41,-83,-40,-55,-74,-10,-70,35,70,87,-29,-91,23,86,61,-47,-7,55,1,-25,-34,-39,-7,-26,19,-75,-36,-34, 40,-58,-37,-38,-63,-74,-48,-49,-38,-23,5,-43,-25,-83,5,-107,-98,-127,-67,-39,-25,49,-2,-44,-37,-10,-27,-42,67,65,31,-38,5,-14,-10,27,-9,-45,-52,-44, 26,-13,6,-15,-6,-15,-32,-52,-14,-17,-17,-11,-57,5,6,-33,-7,-5,-22,-3,56,46,2,-7,9,25,6,-8,21,23,24,18,29,35,39,53,42,34,16,39, 
  /* [1][0][][] */ -66,1,25,-29,-38,-6,4,-36,-14,18,-23,-93,67,21,-27,24,47,-7,17,86,50,56,-28,31,-12,-4,-5,-14,-19,-71,-59,-41,18,-20,-7,8,26,33,35,96, -65,36,47,18,45,-6,31,-22,15,-23,-22,-85,22,50,41,11,79,32,71,127,38,34,-13,-47,-34,-64,-40,-48,-16,-14,-74,-41,50,17,-9,13,27,3,44,28, -18,102,94,40,22,26,38,73,19,-7,-2,-68,35,38,-66,-40,-26,-5,46,123,119,85,-39,-14,-48,-60,-17,-65,-51,-9,-49,-38,26,-17,29,-30,-32,1,-13,10, 
  /* [2][0][][] */ -112,2,-4,-117,-105,-80,-66,-86,-41,-28,-36,-3,-34,-13,-81,-41,-50,-67,-13,-68,-52,-21,63,73,88,107,20,-17,7,-10,9,-55,-127,-80,12,20,60,56,23,41, -25,8,5,28,1,-36,13,6,1,41,66,38,-1,0,-33,0,2,-21,10,23,42,26,27,56,24,8,-16,60,38,33,22,-23,-30,-44,-7,7,-5,-1,-46,-50, 35,4,-10,58,36,21,18,14,46,73,55,42,24,29,-13,15,33,10,38,5,13,-4,-24,-28,-7,7,-30,49,52,34,-2,-14,-39,-44,-13,-39,19,-6,3,-27, 
  /* [3][0][][] */ -5,-16,14,-12,-17,14,0,16,-10,-48,-21,-22,-51,-36,-76,-47,-48,-89,-117,-61,-120,-105,-64,-96,-84,-62,-50,-22,-27,-53,-12,12,35,46,26,-4,-47,-19,-38,18, 40,25,15,77,67,60,67,62,24,17,10,-58,-58,-52,-10,-33,37,-3,-103,-86,-115,-127,-84,-101,-85,-34,-72,-25,-9,-16,34,50,57,30,40,-30,8,-19,26,2, 28,11,35,48,14,62,39,28,25,44,24,20,14,-13,18,19,33,-57,-101,-30,-24,-36,4,4,6,11,-53,-46,-13,-36,50,-10,46,12,-20,-28,8,13,-17,-36, 
  /* [4][0][][] */ -118,-59,2,-83,-127,2,-9,-12,-25,-13,2,-29,-7,-21,36,-53,53,-5,2,-7,-23,-15,11,-48,-5,-9,-6,-66,63,29,31,8,24,-46,2,40,-25,5,-12,-11, -87,44,34,-57,-11,2,9,-30,-51,9,15,49,18,9,42,-59,47,41,84,49,77,34,-21,-40,-43,0,32,4,56,46,66,5,-18,6,21,8,-23,-54,-15,37, -21,-32,-35,26,-3,-23,-32,35,-62,-37,-16,23,-1,-54,82,-20,74,55,-12,41,48,57,40,24,-15,25,18,17,7,64,11,41,29,34,21,53,34,23,20,87, 
  /* [5][0][][] */ 54,-14,-18,-3,15,37,63,31,25,28,36,58,-4,-14,-53,2,-25,-43,-26,-43,-60,-40,14,20,33,40,43,48,43,22,-3,28,54,53,-8,-10,4,22,-14,2, 15,-35,-26,24,28,40,39,30,26,15,-3,-9,6,-36,-57,-31,-60,-34,-71,-86,-108,-102,-58,-47,-8,4,23,61,34,-36,11,58,32,21,46,-5,-1,15,40,-28, 10,-2,3,36,15,52,18,28,43,4,2,-26,-46,-8,-56,-32,-49,-79,-82,-105,-127,-98,-56,-22,-20,9,-22,18,7,-42,-30,-5,-20,6,16,-32,-28,32,24,-16, 
  /* [6][0][][] */ -24,-49,-32,37,-2,-22,42,46,30,47,37,-8,-11,-42,-34,-33,-18,2,-99,-63,-16,6,-12,-46,-23,18,22,40,65,-8,-14,-10,-48,-45,34,-34,17,0,-35,-3, 7,-6,-13,35,26,26,45,46,17,37,58,-21,-12,1,-4,5,36,15,-1,21,-40,-59,-70,-127,-75,-22,-29,2,23,-7,-9,-26,-28,-7,8,-27,-22,-35,-59,-58, 30,-34,-9,21,2,0,56,49,24,16,16,-16,-48,-31,-32,28,25,-11,-6,57,42,20,-36,-60,-42,-40,0,-49,-9,-41,-6,-41,-19,-12,15,-22,0,-22,5,-16, 
  /* [7][0][][] */ -7,-30,-11,8,11,-37,33,25,-1,58,60,51,36,8,71,18,88,51,47,39,32,40,-40,-63,-103,-116,-76,-33,10,25,-20,18,62,67,87,1,56,42,-2,15, -24,-29,5,14,-23,-30,-19,-25,63,10,24,36,7,30,32,41,58,28,30,10,23,30,-127,-73,-123,-89,-14,-32,-88,-76,-61,-36,-23,14,61,-53,-30,-104,-26,-22, -90,-23,-10,-41,-42,-25,-78,-102,-18,-18,-14,-68,-11,-38,-14,19,39,-50,-31,-70,-70,-86,1,10,6,2,-2,39,-40,-2,6,-16,45,62,74,-70,0,-18,-8,-22, 
  /* [8][0][][] */ 97,97,67,25,-5,19,-36,-80,-1,-67,-46,11,-11,4,23,5,27,86,-23,-98,6,-5,-58,-102,17,-10,47,2,-12,59,64,50,48,-3,-22,13,-36,-66,-11,-24, 6,-15,-21,8,-12,-38,-76,-81,-29,15,5,-17,-70,-37,124,-28,49,12,-48,-76,-61,-24,-67,-82,-119,-113,-61,72,-4,98,11,-14,14,-38,-43,-10,-65,-85,-77,-77, 91,-40,-27,8,34,-50,-98,-52,-37,10,42,30,-91,-33,87,-2,77,-17,-73,-61,-111,19,-28,-21,33,-41,0,-127,-2,63,38,35,-18,-5,-17,-30,-51,-44,-71,-100, 
  /* [9][0][][] */ 20,3,23,-34,20,-49,30,39,12,-5,19,-31,22,17,16,-5,39,12,51,124,69,64,-25,-83,-72,-42,-44,-25,57,31,22,-35,-23,-42,18,44,62,86,54,64, 16,2,-60,-12,34,-60,10,24,-42,0,7,29,27,21,14,23,46,33,85,122,75,79,-33,-120,-120,-100,-36,-30,13,-12,-81,-62,-60,-9,-7,-13,44,-10,19,3, 39,-20,-7,-42,-8,-27,-36,-46,-16,-3,6,-49,29,56,-14,28,57,24,124,127,114,83,-99,-106,-124,-94,-30,-87,-7,-40,-19,-75,-34,-31,22,48,61,-2,7,-32, 
  /* [10][0][][] */ -106,-13,-72,31,-14,124,-83,-127,28,55,38,-39,-15,27,24,-33,-10,-17,-33,17,42,49,-11,-100,-84,-24,-11,-70,-56,-82,-97,-41,28,34,-40,-25,-34,-26,43,48, -77,-60,-80,-25,-74,68,20,-22,-4,3,0,0,-1,-18,-47,-51,-58,-6,-116,-102,-70,-45,-3,-52,-54,-67,-29,-81,28,-57,5,29,101,27,45,42,42,12,87,48, 23,32,45,10,67,70,64,94,37,9,-6,12,2,77,53,-35,-12,-68,-49,-22,53,1,-50,-43,20,-7,-40,-24,9,64,64,12,51,48,63,45,62,92,54,76, 
  /* [11][0][][] */ 46,24,-25,5,-4,3,26,-19,-16,-36,0,5,12,36,54,-32,-34,-8,-4,-97,-14,-53,30,21,35,25,-26,35,20,-47,-13,-13,-28,-25,-12,-12,18,-1,-71,-78, -5,-32,-24,23,5,16,19,-8,21,35,2,55,36,107,63,-27,-5,0,-19,-60,5,23,64,102,79,80,46,17,28,20,13,62,-5,-38,-32,5,4,-43,-23,-64, 6,7,-11,23,-28,31,18,48,15,-3,2,127,74,18,86,0,-6,-40,-46,-35,-21,8,37,45,90,83,94,61,60,3,8,66,11,-24,-2,21,-21,-23,-8,-35, 
  /* [12][0][][] */ -96,-86,-127,-65,-63,-4,-49,-99,-53,-44,-30,-57,-12,-53,-81,-71,-29,-82,-29,-26,-6,-15,10,-27,-23,-53,-47,-77,-58,15,-50,7,16,-9,-20,35,34,53,19,56, -44,72,35,15,43,24,9,-25,9,55,30,-13,-17,20,8,-2,24,54,35,55,51,95,42,29,39,7,-34,10,15,49,79,50,50,26,-4,7,54,9,38,120, -8,71,42,48,43,63,-21,4,-40,-30,12,16,-53,-8,-75,-73,-19,-56,-24,4,-33,-22,-15,-34,-72,-57,-41,-67,-8,-6,-1,-32,-22,-18,18,-49,-35,3,-16,9, 
  /* [13][0][][] */ 58,-12,-24,-49,-64,-28,-10,-1,8,30,18,23,38,57,18,31,6,20,29,29,54,79,37,42,31,-51,-63,-63,-85,-111,-127,-87,-47,-37,-22,43,63,72,12,-59, 57,-15,-1,23,-33,7,8,16,-28,16,1,-19,65,73,31,-17,-32,-27,44,49,36,51,-20,29,6,-23,-23,-93,-77,-113,-86,-47,-11,-49,-62,19,37,78,2,-13, 67,27,21,-42,-34,-70,6,-38,1,2,-19,10,8,59,-1,8,12,-2,2,-47,49,7,30,17,-22,43,19,-22,1,-91,-86,-28,-13,12,-8,7,56,71,38,-57, 
  /* [14][0][][] */ 35,-23,-4,64,76,9,7,24,6,-22,-2,-64,-62,-73,-13,-26,67,12,-9,46,-31,10,-64,-127,-97,-53,-50,-49,-15,8,-29,-29,-7,-17,-60,-88,18,86,77,50, 53,-5,-14,20,29,32,40,39,-3,8,-8,-42,-10,-46,-5,-37,16,2,-2,40,-1,-15,-41,-20,-86,6,-62,-71,-10,8,-38,-29,10,39,-13,-64,27,32,96,40, -19,-22,0,15,36,-39,-11,-21,-9,-43,-9,-69,-48,-93,-74,-62,-42,-28,-30,-50,-55,-3,-38,-58,-98,-39,-18,-65,-43,-24,-43,-21,-5,26,27,-16,2,-11,58,74, 
  /* [15][0][][] */ 18,33,-24,-29,-27,11,19,-20,-10,-38,-5,87,93,47,26,-23,-65,-56,13,44,81,65,55,97,43,15,-64,-66,-27,-127,-87,-55,-36,-95,-45,12,27,-29,-13,-108, -12,-10,12,15,-14,-45,14,11,0,21,70,-3,109,122,47,33,-48,35,5,74,34,47,64,-7,15,-22,-49,-71,-107,-106,-103,-27,-64,-93,-87,39,49,47,12,-84, 41,24,14,-81,-4,-55,53,-13,-70,-22,17,47,72,74,17,-12,50,67,108,87,79,37,-8,26,-3,-10,-16,21,-44,-54,-84,-93,-66,-19,-11,29,30,35,-46,-51, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 16,1,3,40 } };
const TfArray<16, float> quant6_scale = { 16, { 0.0081084705889225006, 0.0052973562851548195, 0.0090680737048387527, 0.0077224648557603359, 0.004774418193846941, 0.0080972351133823395, 0.0081877587363123894, 0.0073358304798603058, 0.0073757665231823921, 0.0055383513681590557, 0.0053279828280210495, 0.006664324551820755, 0.0046182367950677872, 0.0059908134862780571, 0.0071739633567631245, 0.004013801459223032, } };
const TfArray<16, int> quant6_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(8) int8_t tensor_data7[32*1*3*16] = { 
  /* [0][0][][] */ 91,-6,28,-65,37,-114,-84,-123,127,16,84,25,35,-73,-37,-43, 94,63,-34,-30,-33,-94,-4,16,68,19,43,25,15,-36,-19,-40, 14,-45,-110,-10,-33,-64,-27,79,30,8,38,-15,-1,8,-8,-20, 
  /* [1][0][][] */ -49,-27,-44,18,-42,23,-10,-38,-42,-20,35,-60,35,16,55,-23, 12,26,30,115,-23,100,52,-4,-18,-39,-9,-58,-28,-44,60,-78, -77,17,-31,127,18,2,-5,22,-77,-85,-14,83,-53,22,-33,8, 
  /* [2][0][][] */ -62,-11,127,-57,49,-5,26,-57,-45,-4,26,-1,-13,26,6,8, 63,-5,22,-39,19,24,8,2,-94,45,-13,6,-33,6,21,-38, 41,-23,16,2,-63,12,12,36,-102,-44,5,-41,-12,-29,2,-34, 
  /* [3][0][][] */ -38,12,-33,26,-34,-27,56,35,-62,42,-17,-4,-19,10,32,13, 92,51,-86,23,-34,-5,31,31,-38,51,-50,-58,-45,25,44,35, -11,50,-127,-35,18,-82,-35,25,-43,84,-37,-27,-9,27,29,17, 
  /* [4][0][][] */ 25,-3,8,-28,-22,84,-42,33,7,14,-3,-127,45,-68,40,-97, 5,-31,107,-16,-41,-56,30,33,-41,10,-49,-48,-2,-50,-57,-19, -32,39,79,-27,-34,-19,66,15,-43,81,-20,19,-60,65,-36,29, 
  /* [5][0][][] */ 127,-33,-46,-8,-73,9,38,49,-23,45,-83,-19,-44,12,19,6, 40,-23,46,-16,-28,-51,-76,82,-62,-11,76,-83,20,-44,-13,-28, -58,62,7,80,32,0,6,-12,-37,-55,2,20,8,-23,-3,-41, 
  /* [6][0][][] */ 5,61,-4,-30,-37,-25,-19,10,-60,-23,109,-127,43,-50,58,-51, 56,11,36,56,-43,2,-5,-53,-8,-42,54,-73,25,-46,26,-50, -70,-1,14,74,-15,79,31,42,-101,-97,42,51,-28,3,85,-85, 
  /* [7][0][][] */ -30,52,14,11,3,-25,18,77,-73,1,22,-32,14,-19,63,-1, -1,55,38,18,-32,-12,34,127,-23,33,20,-67,-12,-17,25,-33, 29,26,-51,12,-30,30,1,83,-2,-41,57,-73,0,-53,36,-29, 
  /* [8][0][][] */ 30,54,31,-52,21,-89,-47,-1,85,19,27,44,44,-81,70,-44, 127,2,-10,2,-73,-108,-91,33,82,-35,-46,1,-80,-40,4,-56, 81,-7,36,-121,7,-124,-57,-41,33,40,13,35,78,8,-21,29, 
  /* [9][0][][] */ -70,-34,-71,12,-21,60,20,-33,12,-51,-46,-13,-14,-42,12,-49, -75,-37,-56,59,-10,14,22,-66,-77,-67,3,22,-63,-10,-38,27, -62,-43,-15,11,7,-17,-54,4,-40,-15,57,30,-1,68,-127,43, 
  /* [10][0][][] */ -81,57,-26,-102,-13,-108,16,-117,-61,97,-87,-29,6,66,-86,29, 5,3,-30,-95,-50,-40,-47,-123,-21,1,26,-2,67,41,-108,-12, -92,-66,40,-72,-35,97,-127,-34,-10,-113,-6,78,-10,37,-46,-32, 
  /* [11][0][][] */ -47,-34,-13,88,-61,25,44,8,18,-70,4,5,-29,-21,-12,4, -79,-10,-42,41,-11,-47,-13,-15,-108,-14,-23,26,-56,13,-127,9, -90,40,-80,-29,33,-44,-37,-44,23,51,6,-27,-36,35,-94,42, 
  /* [12][0][][] */ 39,-83,17,14,-54,27,36,-80,-22,-2,-41,-24,-44,-19,37,-44, 127,23,57,-74,44,6,-21,-91,27,23,42,-26,7,-44,22,-57, 55,26,-11,-37,17,5,-62,-32,85,3,-7,-19,-5,-52,20,-1, 
  /* [13][0][][] */ -29,-68,-27,26,10,57,60,18,-27,-74,-75,39,95,49,-104,31, -127,38,31,-86,41,26,26,52,24,5,-98,62,-40,47,-61,75, 1,14,-34,-13,-72,79,37,111,-72,-44,50,-103,-29,70,25,-7, 
  /* [14][0][][] */ 64,45,-106,-26,-4,-36,61,-60,23,85,-111,-20,-53,42,65,27, 35,49,-82,-5,-15,-57,12,-35,-1,29,75,-29,-5,11,70,-10, 60,54,-44,-7,-20,-40,-60,-5,-28,-32,127,-20,56,47,36,-20, 
  /* [15][0][][] */ 22,16,1,15,-42,-27,64,127,-32,50,-13,-46,-14,10,42,15, 28,1,17,28,-34,-2,-1,112,-72,-7,82,-81,25,-11,61,-56, 37,-3,-29,43,26,13,1,0,-41,-9,35,-22,33,-61,57,-48, 
  /* [16][0][][] */ -93,15,-82,-94,3,-14,-60,-125,-36,106,-81,-18,25,84,-89,47, -106,-45,-32,-101,-9,42,-23,-63,58,-4,-117,17,13,18,-111,-39, -69,-68,15,68,-42,109,-47,-20,59,-127,41,41,-47,-14,-79,-18, 
  /* [17][0][][] */ 53,-29,36,31,-42,-76,53,13,28,69,-19,-60,-6,40,-62,20, 31,48,15,14,-29,-59,48,51,-72,88,31,-49,24,37,-127,39, -18,12,-82,-25,32,-2,35,-10,-82,-32,-76,59,-20,32,-106,-14, 
  /* [18][0][][] */ 104,17,127,-21,7,16,-23,43,-96,30,96,-33,62,11,81,-35, 21,42,23,4,-33,17,-9,78,-46,27,81,-25,28,0,50,-41, 50,-27,-68,22,-77,16,6,81,10,-25,67,-124,-12,-39,49,-59, 
  /* [19][0][][] */ 32,-60,64,75,-36,85,82,73,-127,-8,-58,15,-81,77,-5,54, 54,-62,1,42,-56,64,-1,62,-68,-11,-12,-34,7,-16,48,-56, -12,-73,60,103,-51,55,-66,-107,-107,10,0,14,-35,-40,64,8, 
  /* [20][0][][] */ -60,17,-127,54,-8,20,-29,-19,-40,43,-64,13,12,24,-11,-13, -99,-7,-28,23,-56,46,-35,-53,64,-37,-37,7,-30,22,-60,21, -26,-44,-86,-15,-63,34,-87,-30,37,-123,-53,17,-32,22,-51,23, 
  /* [21][0][][] */ -8,83,125,-5,-2,-13,45,-39,-62,73,42,-33,81,-6,28,12, 38,0,12,-79,4,-40,2,-1,-23,76,-63,-49,20,-15,44,-19, 9,-32,127,-38,-44,-14,-32,-32,-8,23,-33,5,-28,35,7,-18, 
  /* [22][0][][] */ -34,-11,-14,75,-31,22,57,-59,0,-76,-1,-8,-55,-42,-31,-24, -33,-3,-49,-4,7,-26,-7,-57,-95,-1,39,48,39,8,-101,39, -33,26,-60,-5,8,-73,-52,-18,22,8,47,-39,-9,9,-127,5, 
  /* [23][0][][] */ -48,-47,25,31,-34,39,27,-52,-10,-23,-76,-10,-11,-9,15,-19, -74,-22,-27,35,-26,36,2,-18,-13,-5,-47,16,-6,29,-72,8, -5,-78,-17,35,-14,-2,-45,-41,11,-52,4,28,-18,27,-127,13, 
  /* [24][0][][] */ -38,-84,-45,16,-13,54,-2,65,-31,-67,5,-27,-9,20,13,18, -22,-62,-36,121,26,116,24,-38,-32,-43,-14,-19,32,-64,31,-63, -51,-37,-3,36,1,-39,-31,26,-127,-74,-8,81,-13,52,-74,29, 
  /* [25][0][][] */ -22,-56,69,-63,-9,-44,-25,25,-5,-17,-41,-23,-12,18,-27,-28, 28,11,127,-45,1,25,1,1,-23,42,12,29,-11,-1,-33,35, 41,-58,7,-21,0,17,-1,97,29,-48,-51,-10,-14,9,33,-30, 
  /* [26][0][][] */ 53,15,-7,-9,13,-29,-42,-73,48,-35,76,-15,52,8,-33,-6, 11,18,-33,16,8,-28,-33,3,45,29,5,-6,-3,-29,-8,-35, 13,-11,-127,15,-21,12,19,-20,-26,-19,46,-12,-10,-8,25,3, 
  /* [27][0][][] */ -3,37,-88,48,-13,40,83,83,-83,89,-80,-44,15,30,127,27, 61,53,-19,-61,-38,-15,10,59,-33,85,-46,-116,4,4,25,-5, 8,66,63,-40,3,-121,-35,-34,4,44,-91,-55,47,61,25,45, 
  /* [28][0][][] */ -76,-26,-49,-81,-12,49,-5,-57,-70,22,-67,31,-31,73,-68,36, -61,-127,35,13,-17,112,-11,24,-50,-79,-32,29,-24,21,-34,-22, 48,-30,-73,54,-17,105,-6,-31,104,-50,-3,-24,27,-29,73,-36, 
  /* [29][0][][] */ -12,9,-2,-48,1,-35,12,35,-46,51,-12,-30,20,15,-10,11, 30,-42,120,38,-65,5,26,24,-29,8,-15,-53,5,-15,33,-53, 19,7,40,67,-19,63,38,4,-127,17,-32,0,-38,-2,21,35, 
  /* [30][0][][] */ 115,32,61,-84,48,-93,-117,-80,127,-6,77,16,27,-77,-15,-25, 78,-5,-11,47,13,-86,-76,1,93,42,9,29,15,-52,-33,26, 9,-44,-5,-49,-51,-73,-85,53,18,33,-14,10,-14,-17,17,9, 
  /* [31][0][][] */ -16,-17,18,-42,-5,-55,13,97,28,-26,-25,-10,9,-46,-9,-40, -6,-16,127,8,-34,-16,42,81,-83,47,-24,21,-41,39,29,21, 60,-81,54,-7,-36,56,-35,21,-70,-45,5,26,-32,-21,13,-15, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 32,1,3,16 } };
const TfArray<32, float> quant7_scale = { 32, { 0.0057567129842936993, 0.0055835363455116749, 0.0070330318994820118, 0.0062091127038002014, 0.0066452533937990665, 0.0074483142234385014, 0.005513826385140419, 0.0082676513120532036, 0.0050474968738853931, 0.009721449576318264, 0.0051411921158432961, 0.0077409022487699986, 0.0063737560994923115, 0.0044394014403223991, 0.0059315953403711319, 0.0076020462438464165, 0.0051236092112958431, 0.0052727856673300266, 0.0060842433013021946, 0.0057529415935277939, 0.0084251128137111664, 0.0059713502414524555, 0.0087572252377867699, 0.009074394591152668, 0.0057172328233718872, 0.0075539471581578255, 0.0096530364826321602, 0.0053716632537543774, 0.005858931690454483, 0.0068690353073179722, 0.0056669916957616806, 0.0074363918974995613, } };
const TfArray<32, int> quant7_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(8) int32_t tensor_data8[4] = { 1, 1, 20, 40, };
const TfArray<1, int> tensor_dimension8 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data9[4] = { 1, 20, 1, 16, };
const TfArray<1, int> tensor_dimension9 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data10[4] = { 1, 1, 10, 16, };
const TfArray<1, int> tensor_dimension10 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data11[4] = { 1, 10, 1, 32, };
const TfArray<1, int> tensor_dimension11 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,1,20,40 } };
const TfArray<1, float> quant12_scale = { 1, { 0.0033854166977107525, } };
const TfArray<1, int> quant12_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,1,20,16 } };
const TfArray<1, float> quant13_scale = { 1, { 0.020518559962511063, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,20,1,16 } };
const TfArray<1, float> quant14_scale = { 1, { 0.020518559962511063, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,10,1,16 } };
const TfArray<1, float> quant15_scale = { 1, { 0.020518559962511063, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,10,16 } };
const TfArray<1, float> quant16_scale = { 1, { 0.020518559962511063, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,10,32 } };
const TfArray<1, float> quant17_scale = { 1, { 0.019669657573103905, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,10,1,32 } };
const TfArray<1, float> quant18_scale = { 1, { 0.019669657573103905, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,5,1,32 } };
const TfArray<1, float> quant19_scale = { 1, { 0.019669657573103905, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<2, int> tensor_dimension20 = { 2, { 1,160 } };
const TfArray<1, float> quant20_scale = { 1, { 0.019669657573103905, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<2, int> tensor_dimension21 = { 2, { 1,5 } };
const TfArray<1, float> quant21_scale = { 1, { 0.20250871777534485, } };
const TfArray<1, int> quant21_zero = { 1, { 23 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<2, int> tensor_dimension22 = { 2, { 1,5 } };
const TfArray<1, float> quant22_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,8 } };
const TfArray<1, int> outputs0 = { 1, { 12 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 12,6,2 } };
const TfArray<1, int> outputs1 = { 1, { 13 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 13,9 } };
const TfArray<1, int> outputs2 = { 1, { 14 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 14 } };
const TfArray<1, int> outputs3 = { 1, { 15 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 15,10 } };
const TfArray<1, int> outputs4 = { 1, { 16 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 16,7,3 } };
const TfArray<1, int> outputs5 = { 1, { 17 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 17,11 } };
const TfArray<1, int> outputs6 = { 1, { 18 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 18 } };
const TfArray<1, int> outputs7 = { 1, { 19 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 19,1 } };
const TfArray<1, int> outputs8 = { 1, { 20 } };
const TfLiteFullyConnectedParams opdata9 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs9 = { 3, { 20,5,4 } };
const TfArray<1, int> outputs9 = { 1, { 21 } };
const TfLiteSoftmaxParams opdata10 = { 1 };
const TfArray<1, int> inputs10 = { 1, { 21 } };
const TfArray<1, int> outputs10 = { 1, { 22 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension0, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 1920, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension12, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension13, 320, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 320, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 320, (TfLiteIntArray*)&tensor_dimension15, 160, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 160, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 320, (TfLiteIntArray*)&tensor_dimension17, 320, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 320, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 320, (TfLiteIntArray*)&tensor_dimension19, 160, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 160, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 160, (TfLiteIntArray*)&tensor_dimension21, 5, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 5, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers.push_back(ptr);
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    return kTfLiteError;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 23;
  for(size_t i = 0; i < 23; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for(size_t i = 0; i < 11; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 11; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  22, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 11; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
