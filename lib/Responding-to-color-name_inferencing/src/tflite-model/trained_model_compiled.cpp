/* Generated by Edge Impulse
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
// Generated on: 24.08.2021 17:20:35

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 1808;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[23];
TfLiteEvalTensor tflEvalTensors[23];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[11];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,650 } };
const TfArray<1, float> quant0_scale = { 1, { 0.038945756852626801, } };
const TfArray<1, int> quant0_zero = { 1, { 4 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[2] = { -1, 208, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const ALIGN(8) int32_t tensor_data2[8] = { 165, -1226, -839, -1428, -4772, -1086, -1612, -1984, };
const TfArray<1, int> tensor_dimension2 = { 1, { 8 } };
const TfArray<8, float> quant2_scale = { 8, { 0.00018541264580562711, 0.00018684889073483646, 0.00017743569333106279, 0.00019698984397109598, 0.0001118305153795518, 0.00020314560970291495, 0.000151094063767232, 0.00018587097292765975, } };
const TfArray<8, int> quant2_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(8) int32_t tensor_data3[16] = { 488, -728, -117, -1026, -791, -1934, -1602, -603, -220, -318, -1196, -822, -760, -566, -813, -210, };
const TfArray<1, int> tensor_dimension3 = { 1, { 16 } };
const TfArray<16, float> quant3_scale = { 16, { 8.327208342961967e-05, 0.00015680927026551217, 9.1614136181306094e-05, 0.00013561653031501919, 0.00011711314436979592, 0.00012410497583914548, 0.00011447742144810036, 0.00018590765830595046, 0.00012788374442607164, 0.00013313163071870804, 0.00010311527148587629, 0.00011137466208310798, 0.00010627224401105195, 0.00017898170335683972, 0.000146673628478311, 0.00010984571417793632, } };
const TfArray<16, int> quant3_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(8) int32_t tensor_data4[5] = { -545, -1221, -1315, 1692, 341, };
const TfArray<1, int> tensor_dimension4 = { 1, { 5 } };
const TfArray<1, float> quant4_scale = { 1, { 0.00011202082532690838, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(8) int8_t tensor_data5[5*208] = { 
  -19, -45, -30, 31, 6, -44, -24, -26, 21, 15, -8, 26, -8, -70, -29, 2, 8, 28, -7, 35, 21, -30, 10, -15, 22, 23, 15, 23, -31, 56, -29, -38, 0, 5, -13, 43, 11, 30, 18, -30, 43, 32, 15, -1, -75, 59, -60, -21, 26, 7, -6, 10, 15, -20, 42, -7, 41, 16, 14, 44, -74, 75, -26, -34, 21, 30, 9, 43, -19, 32, -8, -17, -17, 37, 32, 24, -54, 56, 3, -48, 9, 9, 40, 23, 36, 12, -32, -55, -13, 7, 5, 47, -32, 33, -36, -21, 1, -33, 1, 40, 19, 21, -78, 2, 15, 15, 11, -2, -9, 6, 1, -12, -3, -68, 32, 5, 21, 33, -83, -47, 40, 34, 11, -2, -5, 10, 0, -53, -6, -79, -14, 4, 18, 18, -71, -56, 37, 18, 24, 17, -32, 37, -66, -38, -16, -86, -28, 7, 29, 26, -107, -42, 35, 18, 32, 12, 27, 19, -10, 18, -5, -38, -59, 41, 26, 29, -59, -19, 16, 24, -35, -47, -5, 23, -41, -31, -24, 3, -67, 11, -5, 27, -11, -11, 51, 4, -10, -29, 44, -38, -34, -13, -66, 27, -56, 15, 8, 23, 29, -39, 18, -49, -115, 48, -33, 60, -21, -28, 
  -17, -81, 10, 31, 56, -53, -62, -4, 1, -6, 19, 32, -16, -61, -6, 29, -1, -60, 26, 53, 39, 21, -67, -21, -12, 29, 21, 5, 25, -73, 0, 16, -9, -67, 6, -5, 5, 16, -74, 13, -29, -15, 29, -1, 29, -8, -16, 23, 8, -35, -19, -9, 35, 35, -43, -28, -16, 74, 17, 17, 4, -51, -14, 3, 3, 45, -28, -73, 79, 17, 25, -29, 65, 45, 35, 11, -7, -37, -44, 14, -4, 38, -1, -37, 56, 18, -29, -72, 64, 37, 17, 47, 7, -5, -80, -2, -40, 31, -51, -74, 32, 36, 39, -4, 58, 12, -48, 6, -2, -25, -117, -32, -54, 45, -61, -89, 43, -8, 57, 43, 15, 25, -30, 2, 35, 0, -66, -48, -61, 54, -55, -6, -20, 13, 43, 16, -5, -6, -61, 8, -27, 23, -26, -81, -81, 74, 21, 2, -8, 14, 88, 31, -6, 14, -55, 46, -15, 0, 39, -63, -39, 63, -79, -4, -18, 10, 23, -26, -31, 28, -74, -7, -36, 30, -9, -16, -41, -56, -50, 4, -2, 21, -34, -25, 3, 42, -43, -76, -29, 13, -14, -18, -63, -113, -41, 18, 12, -11, -13, -22, -5, 14, -48, -42, -13, -26, -10, -13, 
  -30, 2, -5, 1, -40, -42, 88, 55, -38, -24, 18, -114, 60, -49, -1, 1, -16, 68, -4, -8, -13, -89, 70, 60, -20, -48, -18, -64, 23, -9, 22, -3, -31, 39, -1, -4, -50, -71, 35, 25, -51, -7, -32, -57, 49, -13, 10, -10, -80, 52, -10, -37, -50, -89, 60, 8, -26, -107, -56, 7, 21, 22, 38, -19, -49, 63, -5, -74, -79, -46, 42, -50, -70, -72, -60, 26, 2, 27, 14, -16, -81, 49, -33, -12, -64, -7, 52, 8, -53, 44, -28, 39, 6, 69, -1, -44, -54, 68, -64, 53, -29, -11, 38, 61, -43, 57, -50, 20, 20, 9, -32, -92, -11, 43, -33, 46, -44, -45, 27, 80, -85, 51, -16, -16, 9, 39, -36, -57, 26, 65, -53, -14, -39, 21, 29, 62, -22, 25, 5, -16, -20, 35, -66, -27, 19, 76, 31, 14, -13, -12, -4, 53, -21, 28, 17, -23, -127, 35, 34, -10, 45, -48, -28, 7, -56, 36, -63, 51, -57, 55, 45, -23, -101, 87, -41, -11, 25, -99, -59, 2, -22, 14, -40, 39, -21, 67, 55, -17, -47, -20, -29, 2, 58, -105, -39, -40, -68, 9, -41, 23, -32, 50, 44, -38, 2, -74, -4, -7, 
  20, 41, 62, -29, -39, 29, 12, -38, -60, -65, 35, 53, 36, 19, -4, 8, 12, -24, -31, -45, 27, -1, -42, -7, -26, -3, -17, -14, 3, -69, 6, -12, 37, -17, 33, -50, -40, 3, 9, 10, 54, 21, 38, 7, 18, -54, 3, 4, 43, -26, 32, -27, 20, -30, -33, 12, 5, -12, 21, -14, 2, -44, 10, 15, 30, -107, 5, -10, -27, -27, -21, 14, -14, -49, 15, -12, -24, -106, 38, 29, 17, -43, 0, -10, -42, -73, -60, 37, -21, -37, -6, -9, -12, -98, 30, 52, 34, -76, 19, 24, -56, -63, 8, 45, -10, -66, -1, -32, 44, -62, 25, 45, 6, -65, 24, -15, -54, -60, -8, -4, -9, -84, 13, -19, 20, -105, 69, 59, 36, -57, 35, -20, -16, -59, -1, 7, -11, 8, 21, -38, 14, -41, 22, 45, 48, -86, 30, -39, -3, -47, -29, 1, 11, 19, 43, 27, 51, -72, 52, 59, 61, -35, 72, -14, -5, -5, -23, -26, 29, -25, 47, 22, 21, -68, 25, 39, 20, -46, 52, -58, -55, -18, 4, -3, 33, -54, 33, 23, 39, -11, -3, 32, 56, 10, 7, -30, -18, -4, -37, -34, 20, -73, 14, 75, 32, -10, 12, 42, 
  -22, 71, -2, -9, -1, 54, -11, 30, 41, 0, -34, -5, 3, 75, -31, -16, -13, 25, -1, 5, 17, 31, 14, 20, -7, -7, -28, -34, 8, 7, 6, -17, -17, 22, -31, -41, -28, 31, 33, 51, 12, 21, -37, -35, 22, -26, -8, -11, 19, 23, 5, 19, 39, 43, 23, 65, 45, 1, 2, -1, 12, 25, 31, -27, 11, 34, 25, -9, 11, 52, 4, 65, -1, -35, 26, -16, 14, 7, 13, -14, 12, 13, 11, 47, -15, 33, 7, 34, 23, -39, 11, 21, 17, 27, 14, 18, 0, 30, -17, 20, 0, 25, -7, 1, 36, -39, -16, -3, 14, -13, 25, 31, -4, 17, 18, 25, -1, -6, 11, 4, -54, -15, 9, -31, -30, 27, 60, -14, 11, 22, 3, 0, -19, 8, -7, -9, -6, -56, 28, 1, 24, 19, 10, 50, 5, 28, 12, -20, -20, 0, 21, -22, -15, -20, -7, 14, 28, -17, 28, 24, 27, 37, 7, -14, 39, -19, 38, -17, -31, -46, -22, 51, 50, -83, 23, 43, -20, 60, -9, 32, -7, -27, 33, -10, 14, 1, 22, 45, 29, -34, 19, -1, 11, 51, -1, 39, -8, -10, 17, 6, -26, 5, 10, -43, 8, -30, 6, 53, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 5,208 } };
const TfArray<1, float> quant5_scale = { 1, { 0.0044771991670131683, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(8) int8_t tensor_data6[8*1*3*13] = { 
  /* [0][0][][] */ -70,32,-25,24,111,25,18,36,23,33,20,-17,-13, 122,-69,-127,-56,49,0,7,-51,-4,4,20,44,26, -24,77,7,-20,6,10,23,3,51,32,-6,4,16, 
  /* [1][0][][] */ -23,54,46,-11,-4,8,-50,-32,-7,61,-17,6,-8, 15,104,73,10,-23,39,-48,-81,43,11,-3,55,-9, 28,127,26,38,-51,30,-16,-41,11,12,43,24,-12, 
  /* [2][0][][] */ -51,-76,12,4,-27,-30,-21,34,-70,-21,44,39,-15, -80,-71,-32,-14,23,-40,60,-11,-28,-32,29,-26,-48, -127,-80,-8,-45,-7,-16,32,18,-58,30,10,-75,-10, 
  /* [3][0][][] */ -93,87,-41,2,41,-78,-53,21,-14,-12,-2,-21,62, 17,90,-64,15,36,-32,-85,-9,42,61,7,-32,7, -14,5,-127,-12,36,-6,-5,-34,17,6,-23,3,32, 
  /* [4][0][][] */ 93,105,-81,-3,-20,-64,56,75,-62,4,8,7,53, 95,127,-61,-2,-78,-76,75,117,-37,-2,0,-55,66, 121,98,-10,-57,-8,-61,60,40,-55,-29,76,25,20, 
  /* [5][0][][] */ 41,-127,-9,-42,10,7,-20,-32,13,-27,23,-21,41, 38,-75,33,-41,29,-24,-7,-13,21,11,9,-6,29, 96,-105,-41,-25,16,-20,-9,2,-11,-14,19,-4,11, 
  /* [6][0][][] */ -64,17,-73,-87,-8,-28,47,48,-19,12,-33,-16,-34, -71,68,50,65,41,-12,-22,-12,4,18,-1,-27,-8, -127,14,-6,-106,-55,-52,6,-22,56,59,-11,-31,25, 
  /* [7][0][][] */ -6,-28,51,69,-24,-94,18,5,-49,53,-7,-20,10, 13,-16,89,48,-13,-39,-4,43,-13,19,29,-24,3, -43,-49,127,73,-28,-53,-9,-2,-26,3,19,-26,20, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 8,1,3,13 } };
const TfArray<8, float> quant6_scale = { 8, { 0.0047607920132577419, 0.0047976700589060783, 0.0045559699647128582, 0.0050580566748976707, 0.0028714428190141916, 0.005216116551309824, 0.0038796025328338146, 0.0047725602053105831, } };
const TfArray<8, int> quant6_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(8) int8_t tensor_data7[16*1*3*8] = { 
  /* [0][0][][] */ -87,-28,-100,127,-14,-17,91,-30, 125,-21,-80,-31,-22,1,41,-2, 65,-18,-20,127,8,33,104,-11, 
  /* [1][0][][] */ -100,81,-127,-82,-38,-60,-20,70, -64,13,-103,-39,-42,-72,-95,4, -25,86,-68,13,38,-110,-119,8, 
  /* [2][0][][] */ -95,14,-80,5,8,70,-17,-20, 115,-33,-31,127,-52,-35,-53,8, 30,-22,-25,0,-53,49,6,-8, 
  /* [3][0][][] */ -76,-58,43,-54,-23,13,-30,55, -56,-100,7,-2,-9,26,25,-5, -48,-127,72,-52,-67,11,33,-11, 
  /* [4][0][][] */ -96,-10,7,-97,94,-51,-65,37, -127,-15,3,-101,-10,-23,-33,28, -37,-27,52,-18,-28,19,-58,101, 
  /* [5][0][][] */ -21,-10,-116,20,127,-42,-19,70, -50,2,-87,14,25,-77,-48,-17, -28,3,-78,-22,60,-80,-39,78, 
  /* [6][0][][] */ -66,25,-37,-23,-73,112,-82,90, -66,20,-49,-108,-22,28,-84,-1, -64,127,-99,-47,6,-70,-91,-9, 
  /* [7][0][][] */ -6,-77,33,-2,0,-20,42,-52, 32,-125,-2,8,26,-22,60,-95, 0,-127,13,31,-9,-20,4,-50, 
  /* [8][0][][] */ -73,-39,23,-67,45,-60,36,101, -54,-21,-76,-39,17,-42,20,35, -37,0,-31,-127,-72,-29,34,62, 
  /* [9][0][][] */ -83,-127,-5,-69,112,-8,-37,-40, -47,-66,51,-81,69,-8,20,-35, -102,-108,32,-74,65,-26,15,43, 
  /* [10][0][][] */ 10,-17,6,90,-34,-4,-44,-12, 102,20,-11,127,19,9,69,-78, -14,6,-93,-24,3,-41,19,-110, 
  /* [11][0][][] */ 48,-35,-55,50,-61,-71,29,-8, 36,78,-64,6,-88,-60,-45,59, 37,12,-127,88,21,-101,-17,-41, 
  /* [12][0][][] */ 98,52,-86,36,20,106,13,-35, 2,15,-65,-73,-29,0,-14,-6, -16,17,-84,-123,-18,51,-33,127, 
  /* [13][0][][] */ -38,58,-97,13,-10,-127,-56,-38, -32,18,-46,1,67,-73,-50,-21, 2,-36,-68,42,45,-51,-24,-54, 
  /* [14][0][][] */ -17,-26,6,27,-24,113,-26,-12, 2,9,-48,25,6,21,-18,-14, -27,32,-3,-41,7,127,-56,-12, 
  /* [15][0][][] */ 60,17,-79,102,-44,-127,13,0, -47,0,-26,-76,-46,54,97,8, 39,-33,22,-107,-56,67,-46,15, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 16,1,3,8 } };
const TfArray<16, float> quant7_scale = { 16, { 0.0025533086154609919, 0.0048081232234835625, 0.0028090944979339838, 0.0041583064012229443, 0.0035909512080252171, 0.0038053365424275398, 0.0035101340617984533, 0.0057003451511263847, 0.0039212019182741642, 0.0040821139700710773, 0.0031617451459169388, 0.0034149964340031147, 0.0032585449516773224, 0.0054879798553884029, 0.0044973418116569519, 0.0033681155182421207, } };
const TfArray<16, int> quant7_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(8) int32_t tensor_data8[4] = { 1, 1, 50, 13, };
const TfArray<1, int> tensor_dimension8 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data9[4] = { 1, 50, 1, 8, };
const TfArray<1, int> tensor_dimension9 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data10[4] = { 1, 1, 25, 8, };
const TfArray<1, int> tensor_dimension10 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data11[4] = { 1, 25, 1, 16, };
const TfArray<1, int> tensor_dimension11 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,1,50,13 } };
const TfArray<1, float> quant12_scale = { 1, { 0.038945756852626801, } };
const TfArray<1, int> quant12_zero = { 1, { 4 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,1,50,8 } };
const TfArray<1, float> quant13_scale = { 1, { 0.032613404095172882, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,50,1,8 } };
const TfArray<1, float> quant14_scale = { 1, { 0.032613404095172882, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,25,1,8 } };
const TfArray<1, float> quant15_scale = { 1, { 0.032613404095172882, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,25,8 } };
const TfArray<1, float> quant16_scale = { 1, { 0.032613404095172882, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,25,16 } };
const TfArray<1, float> quant17_scale = { 1, { 0.025020290166139603, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,25,1,16 } };
const TfArray<1, float> quant18_scale = { 1, { 0.025020290166139603, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,13,1,16 } };
const TfArray<1, float> quant19_scale = { 1, { 0.025020290166139603, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<2, int> tensor_dimension20 = { 2, { 1,208 } };
const TfArray<1, float> quant20_scale = { 1, { 0.025020290166139603, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<2, int> tensor_dimension21 = { 2, { 1,5 } };
const TfArray<1, float> quant21_scale = { 1, { 0.10820651799440384, } };
const TfArray<1, int> quant21_zero = { 1, { -12 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<2, int> tensor_dimension22 = { 2, { 1,5 } };
const TfArray<1, float> quant22_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,8 } };
const TfArray<1, int> outputs0 = { 1, { 12 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 12,6,2 } };
const TfArray<1, int> outputs1 = { 1, { 13 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 13,9 } };
const TfArray<1, int> outputs2 = { 1, { 14 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 14 } };
const TfArray<1, int> outputs3 = { 1, { 15 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 15,10 } };
const TfArray<1, int> outputs4 = { 1, { 16 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 16,7,3 } };
const TfArray<1, int> outputs5 = { 1, { 17 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 17,11 } };
const TfArray<1, int> outputs6 = { 1, { 18 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 18 } };
const TfArray<1, int> outputs7 = { 1, { 19 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 19,1 } };
const TfArray<1, int> outputs8 = { 1, { 20 } };
const TfLiteFullyConnectedParams opdata9 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs9 = { 3, { 20,5,4 } };
const TfArray<1, int> outputs9 = { 1, { 21 } };
const TfLiteSoftmaxParams opdata10 = { 1 };
const TfArray<1, int> inputs10 = { 1, { 21 } };
const TfArray<1, int> outputs10 = { 1, { 22 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 656, (TfLiteIntArray*)&tensor_dimension0, 650, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 1040, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 312, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension12, 650, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 656, (TfLiteIntArray*)&tensor_dimension13, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension15, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension17, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension19, 208, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 208, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 208, (TfLiteIntArray*)&tensor_dimension21, 5, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 5, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers.push_back(ptr);
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    return kTfLiteError;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 23;
  for(size_t i = 0; i < 23; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for(size_t i = 0; i < 11; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 11; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  22, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 11; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
