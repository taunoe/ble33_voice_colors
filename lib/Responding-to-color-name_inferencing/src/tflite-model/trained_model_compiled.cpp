/* Generated by Edge Impulse
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
// Generated on: 25.08.2021 16:19:43

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 1808;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[23];
TfLiteEvalTensor tflEvalTensors[23];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[11];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,650 } };
const TfArray<1, float> quant0_scale = { 1, { 0.038464654237031937, } };
const TfArray<1, int> quant0_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[2] = { -1, 208, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const ALIGN(8) int32_t tensor_data2[8] = { -1005, -7494, -3283, -6102, -5838, -3810, -61, -2379, };
const TfArray<1, int> tensor_dimension2 = { 1, { 8 } };
const TfArray<8, float> quant2_scale = { 8, { 0.00023855411563999951, 0.00016004298231564462, 0.00017196321277879179, 0.00013264465087559074, 0.00014099586405791342, 0.00024221427156589925, 0.00026682051247917116, 0.00023439872893504798, } };
const TfArray<8, int> quant2_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(8) int32_t tensor_data3[16] = { -1606, -1495, -2988, -3131, -1700, 408, -762, -1822, -273, 420, -3909, -2924, 2785, -2686, 619, 186, };
const TfArray<1, int> tensor_dimension3 = { 1, { 16 } };
const TfArray<16, float> quant3_scale = { 16, { 8.4624836745206267e-05, 0.0001716387050691992, 0.0001660297712078318, 0.00021761568496003747, 0.00017264114285353571, 0.00014036789070814848, 0.00016754872922319919, 0.00017948808090295643, 0.00017221645975951105, 0.00019060618069488555, 0.0001101609886973165, 0.00019704474834725261, 0.0001443377259420231, 0.00017571485659573227, 0.0001140789026976563, 0.00012439457350410521, } };
const TfArray<16, int> quant3_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(8) int32_t tensor_data4[5] = { -1025, -2101, -3021, 5441, -1090, };
const TfArray<1, int> tensor_dimension4 = { 1, { 5 } };
const TfArray<1, float> quant4_scale = { 1, { 0.00014126030146144331, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(8) int8_t tensor_data5[5*208] = { 
  -18, -18, 15, 37, 5, -31, -26, -48, 21, 10, 32, 39, -25, 118, -40, -2, 4, 20, -51, 38, 8, -21, -1, 4, -1, 45, 9, 31, -13, 48, -51, -14, -5, 13, -55, 9, -2, 48, 6, -7, 21, 33, -5, 28, -43, 53, -39, -5, 8, 36, -69, 39, -26, 22, 6, -48, 22, 41, 10, 26, -14, 49, -21, -52, 19, 40, -43, -12, -58, 8, -35, -80, -4, 26, 21, 21, -16, 22, -44, -52, 8, 13, -70, 27, 0, 4, -66, -107, 30, 34, 18, 53, -20, 15, -26, -51, -3, -1, -62, 37, 13, 19, -39, -37, 17, 1, 13, 35, 19, 5, -12, -56, -13, -32, -37, 48, 16, 18, -56, -76, -7, 20, 13, 17, 6, 8, 7, -48, 1, -51, -32, 27, 13, 37, -30, -95, 26, 19, 24, 33, 5, 19, -27, -56, -3, -70, -27, 7, 12, 19, -68, -58, 20, 25, 33, 62, -2, 20, -45, 0, 20, -53, -22, 26, 47, 31, -44, 26, 17, 11, 15, 45, -45, 35, -23, 0, -36, -7, -41, 20, 1, 15, -41, -2, 42, 27, 4, 31, -21, -4, -54, 3, -87, 59, -32, -7, 31, -28, -26, -12, 10, -15, -94, 72, 28, 43, -61, -3, 
  -16, -80, 21, 21, -9, -6, -79, -2, -3, -10, 42, 49, -21, -85, -64, 5, 8, -62, -72, -7, 16, -33, -86, -10, 3, 14, 40, 43, -2, 5, -35, -20, 5, -63, -13, -35, -60, -22, -55, 14, -33, -57, 27, 36, 21, 0, -53, -33, 27, -18, -67, -39, 63, -3, -38, -11, -6, -23, 17, 32, -9, -11, -21, -46, 11, 17, -75, -56, 64, -27, 12, -22, 25, -7, 21, 37, -13, -16, -47, -57, 2, 24, -55, 12, 77, -21, 25, -20, 30, 19, 22, 60, 8, -5, -65, 0, -30, 26, -114, -62, 74, 23, 46, 7, 68, -18, -10, 17, -3, -13, -41, -7, -2, 15, -16, -63, 34, 22, 48, -36, 13, 35, -1, 11, -15, 19, -1, -82, -28, 33, -43, -67, 17, 16, 49, 31, 15, 7, 4, -22, -58, 32, -5, -40, -39, 38, -21, -75, 12, 27, 53, 28, -20, 9, -13, -52, -54, 17, 28, -38, -33, 66, -29, -35, -33, 35, 55, -28, -34, 17, -81, -56, -16, 8, -25, -32, -37, 73, -49, -16, -69, 51, 22, 12, -22, 23, -39, -100, -30, 54, 2, -9, -31, -97, -119, -51, -24, 47, -68, 16, -24, 20, -67, -68, -24, 90, 19, 9, 
  2, 1, 29, -44, -39, -75, 65, 50, -99, -40, -30, -83, 34, -52, 4, 9, -5, 71, 28, -41, -12, -69, 82, 58, -59, -36, -14, -81, 8, -72, 27, -2, -47, 37, 31, -50, -11, -101, 36, 35, -25, -40, -68, -32, 30, -90, 0, -1, -76, 43, 36, -22, -20, -10, 56, 53, -11, -123, -61, -39, 19, 36, 12, -43, -76, 53, 23, -75, -21, 25, 29, 56, -72, -48, -101, -4, -1, 4, 4, -13, -85, 35, 12, -35, -30, 39, 34, 21, -36, 33, -77, 9, 38, 27, -1, -19, -53, 38, 4, -17, -53, 23, 35, -35, -22, 38, -90, -12, 22, 5, -47, -81, -38, 17, 36, 8, -68, -20, 26, 52, -76, 16, -42, -44, -40, 12, -75, -61, -7, 47, -39, -9, -52, 32, 35, 64, -44, 28, -23, -55, -85, 27, -16, 1, 10, 61, -71, -17, -46, 19, 25, 11, -55, 27, -31, -39, -63, 23, 41, -37, 16, 9, -80, -13, -56, 32, -33, 10, -62, 38, 0, -33, -40, 43, -28, -13, 9, -60, -37, -49, -49, 42, -28, 30, -22, 50, 20, -13, 4, -30, -29, 6, 48, -79, 49, -3, -70, 11, 1, 18, -16, 16, 53, -16, -59, -64, -12, 32, 
  -1, 3, -9, -47, 3, 9, 30, -30, -22, -33, -36, -35, 25, -22, 19, -2, -7, -16, 16, -17, 26, 4, 7, -38, -15, 18, -44, -41, 38, -77, 26, 5, 12, -34, 12, -9, -16, 4, -4, 2, 23, 34, 18, -50, 27, -42, 6, 20, 17, -35, 15, -25, -5, -13, -27, 10, 30, 34, -9, 1, 13, -41, 20, 35, 19, -127, 26, 9, -37, 4, -26, -3, 18, -17, 12, -44, 17, -45, 50, 35, 22, -69, 28, -22, -51, -12, -36, 17, -11, -38, -24, -71, 5, -48, 19, 49, 46, -87, 17, 14, -29, -41, -47, 23, -27, -5, -28, -69, 31, -64, 25, 37, 16, -67, -6, -59, -32, -57, -12, 34, 2, -60, 0, -29, 31, -91, 44, 30, 17, -66, 13, -24, -21, -90, -21, -3, -7, -27, -3, -8, 49, -56, 13, 38, 15, -62, 37, 14, 10, -31, -30, -5, 18, -22, 5, 1, 60, -45, 45, 43, 37, -59, -4, -21, 6, -6, -26, -21, 25, -55, 23, 0, 57, -56, 43, 28, 19, -48, 1, -10, 11, -16, -11, -38, 22, -60, 9, 16, 63, -56, 25, -2, 41, 16, 16, -3, -34, 13, 15, -41, 21, -16, 12, -13, 54, -105, 28, 14, 
  -14, 63, -2, 28, 12, 43, -9, 26, 32, 21, -1, 28, 16, -20, 1, -8, -1, 8, 17, 28, 22, 42, -10, 8, 15, -28, -16, -32, -12, -6, 18, -8, -1, 17, -3, 11, 13, 15, 33, 8, 29, 23, 0, -40, -2, -10, 0, 8, 10, 0, 38, 18, 31, 7, 39, 25, 2, 12, 9, -12, -24, 19, 14, 6, 16, 19, 26, 23, 18, 25, 31, 48, -3, -3, 26, -7, -25, 9, 5, 28, 9, 20, 36, 33, -16, -4, -5, 20, -7, -61, 26, 14, -19, 20, 6, 20, 1, 16, 48, 41, -31, -2, 8, 64, 16, -25, 13, -6, -15, -6, 7, 30, 4, 14, 28, 28, 5, -23, 3, 17, -13, -9, 14, -10, -8, 12, 40, 19, 21, 19, 26, 15, -13, -12, -11, 0, -3, -39, 20, 8, 21, 16, -22, 28, 11, 24, 49, 22, -11, -45, 10, 5, -4, -17, 19, 28, 25, -20, 9, 32, 16, 35, 38, 31, 16, -71, 9, -4, -2, -17, 3, 13, 10, -69, 4, 20, -4, 31, 28, 28, 15, -64, 26, 0, 24, -9, 28, 17, 16, 3, 5, 3, 9, -11, 11, 46, 15, -46, 28, -14, -5, -23, 6, 20, -11, 17, 1, 7, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 5,208 } };
const TfArray<1, float> quant5_scale = { 1, { 0.0069179837591946125, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(8) int8_t tensor_data6[8*1*3*13] = { 
  /* [0][0][][] */ -127,51,11,13,22,8,-17,-24,7,10,-1,-38,-15, 125,-103,-125,-21,28,4,-28,-76,-5,10,-11,12,21, -10,35,-1,-14,6,26,-7,2,26,-14,2,28,-7, 
  /* [1][0][][] */ 21,126,34,-23,-12,56,-33,-51,-13,38,-37,42,29, 30,127,-21,-50,5,26,29,-111,-17,65,-12,10,12, 42,123,-37,28,11,58,-31,-83,67,8,-13,27,-52, 
  /* [2][0][][] */ -63,-72,-32,57,-27,3,82,-15,-44,-8,40,-28,-46, -91,-85,-16,35,-28,-24,86,21,-21,19,4,-44,-8, -93,-127,6,8,-51,20,26,-12,-39,30,-9,1,-40, 
  /* [3][0][][] */ -109,-2,-127,-53,111,-54,-73,45,34,32,-36,23,85, -54,60,-111,-31,120,-20,-91,-22,92,106,-47,37,84, 23,98,-110,-29,92,-56,0,-2,64,16,-83,42,35, 
  /* [4][0][][] */ 57,75,-92,-37,-9,-25,34,11,-89,-20,36,28,21, 45,38,-100,-43,-24,-71,8,62,-127,-46,20,1,-12, 57,74,-64,2,-26,-36,23,49,-60,-71,33,-28,62, 
  /* [5][0][][] */ 10,-77,30,-30,29,-24,30,-19,18,-21,24,-16,16, 13,-67,34,-39,27,-18,26,5,9,7,17,-8,13, 127,-53,-28,-34,34,-14,9,-31,-7,-18,-7,-21,23, 
  /* [6][0][][] */ -127,9,-48,-22,13,-20,4,12,-6,14,25,-11,26, -89,53,-10,-27,-16,-21,-5,4,19,-9,-41,-22,-3, -113,-3,-16,-12,10,23,10,-9,0,-5,13,17,25, 
  /* [7][0][][] */ 8,1,55,66,-35,-32,-8,-26,-7,47,-5,10,-9, 5,-2,73,26,-51,-20,5,-28,-6,30,23,6,-27, -31,0,127,14,-31,-23,-18,-29,-4,17,8,-3,-2, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 8,1,3,13 } };
const TfArray<8, float> quant6_scale = { 8, { 0.0062019047327339649, 0.0041607804596424103, 0.0044706813059747219, 0.0034484814386814833, 0.0036655955482274294, 0.0062970607541501522, 0.0069367713294923306, 0.0060938731767237186, } };
const TfArray<8, int> quant6_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(8) int8_t tensor_data7[16*1*3*8] = { 
  /* [0][0][][] */ -127,-55,-103,80,22,-18,55,-30, 92,-5,-73,-58,17,-18,25,13, 18,9,-38,122,-16,-30,22,17, 
  /* [1][0][][] */ -53,61,-19,-103,-41,-100,-36,57, -71,-13,-58,-67,-15,-119,-111,35, -42,108,-71,-21,20,-81,-127,3, 
  /* [2][0][][] */ -20,87,-68,-7,2,127,-66,-9, -57,-8,-38,-13,-45,3,-17,6, -66,-29,-19,-68,-61,10,53,0, 
  /* [3][0][][] */ -49,-22,-17,-60,-17,35,-29,27, -51,-70,-6,-51,-7,18,-4,5, -28,-127,70,-35,-26,28,3,-6, 
  /* [4][0][][] */ -90,-64,3,20,41,-55,-59,-8, -127,-44,40,-94,7,-55,-57,-13, -61,-20,-19,-62,-34,36,-42,92, 
  /* [5][0][][] */ -48,-30,-85,-12,110,-105,-67,32, -81,-76,-74,-37,-50,-104,1,11, -77,-127,-56,-33,93,-108,4,-17, 
  /* [6][0][][] */ -18,-24,-1,-20,-62,21,-102,91, -36,-22,-49,-85,-32,42,-123,-33, -21,39,-83,-34,23,-42,-127,42, 
  /* [7][0][][] */ -33,-123,3,15,-10,14,56,-109, -20,-127,7,18,-59,-4,4,-102, -8,-112,-18,35,-94,74,6,-58, 
  /* [8][0][][] */ -29,-51,54,-33,22,-62,6,61, -31,-53,-13,-71,-38,-17,-10,-3, -11,-22,-7,-127,-49,-11,-1,41, 
  /* [9][0][][] */ -41,-65,24,-82,67,-18,-35,-27, -34,-71,3,-127,36,-54,6,-64, -31,-120,39,-36,10,-67,15,-25, 
  /* [10][0][][] */ 26,-54,68,88,17,-28,6,-94, 23,12,-8,100,3,-22,-6,-67, -48,96,-127,-28,41,-88,-104,-8, 
  /* [11][0][][] */ -15,13,-58,56,-59,-96,-1,-24, 21,76,-74,-4,-50,-47,-35,-80, 32,-10,-127,25,-29,-8,-52,-107, 
  /* [12][0][][] */ 127,-9,-112,-24,-28,59,7,-42, 2,-24,-91,-48,-30,-70,-15,0, 37,-21,-64,-55,-51,2,-30,30, 
  /* [13][0][][] */ -36,49,-74,20,-38,-103,-116,28, 2,2,-14,2,69,-33,-127,4, -11,-16,-42,54,9,-13,-116,-67, 
  /* [14][0][][] */ -83,-93,4,-65,-23,39,40,-36, 127,-31,-34,-50,0,35,-39,-56, 40,-42,-70,-6,20,120,-56,-21, 
  /* [15][0][][] */ 43,-39,-22,-7,-105,-127,-19,40, 5,-61,-11,4,-73,33,117,9, 24,-55,-14,-26,8,116,-29,-12, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 16,1,3,8 } };
const TfArray<16, float> quant7_scale = { 16, { 0.002809060038998723, 0.0056974221952259541, 0.0055112377740442753, 0.0072235944680869579, 0.0057306974194943905, 0.0046594101004302502, 0.0055616586469113827, 0.0059579764492809772, 0.0057166004553437233, 0.0063270339742302895, 0.0036567139904946089, 0.0065407576039433479, 0.0047911861911416054, 0.0058327270671725273, 0.0037867664359509945, 0.0041291876696050167, } };
const TfArray<16, int> quant7_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(8) int32_t tensor_data8[4] = { 1, 1, 50, 13, };
const TfArray<1, int> tensor_dimension8 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data9[4] = { 1, 50, 1, 8, };
const TfArray<1, int> tensor_dimension9 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data10[4] = { 1, 1, 25, 8, };
const TfArray<1, int> tensor_dimension10 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data11[4] = { 1, 25, 1, 16, };
const TfArray<1, int> tensor_dimension11 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,1,50,13 } };
const TfArray<1, float> quant12_scale = { 1, { 0.038464654237031937, } };
const TfArray<1, int> quant12_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,1,50,8 } };
const TfArray<1, float> quant13_scale = { 1, { 0.030125677585601807, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,50,1,8 } };
const TfArray<1, float> quant14_scale = { 1, { 0.030125677585601807, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,25,1,8 } };
const TfArray<1, float> quant15_scale = { 1, { 0.030125677585601807, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,25,8 } };
const TfArray<1, float> quant16_scale = { 1, { 0.030125677585601807, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,25,16 } };
const TfArray<1, float> quant17_scale = { 1, { 0.02041928842663765, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,25,1,16 } };
const TfArray<1, float> quant18_scale = { 1, { 0.02041928842663765, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,13,1,16 } };
const TfArray<1, float> quant19_scale = { 1, { 0.02041928842663765, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<2, int> tensor_dimension20 = { 2, { 1,208 } };
const TfArray<1, float> quant20_scale = { 1, { 0.02041928842663765, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<2, int> tensor_dimension21 = { 2, { 1,5 } };
const TfArray<1, float> quant21_scale = { 1, { 0.11598985642194748, } };
const TfArray<1, int> quant21_zero = { 1, { 17 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<2, int> tensor_dimension22 = { 2, { 1,5 } };
const TfArray<1, float> quant22_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,8 } };
const TfArray<1, int> outputs0 = { 1, { 12 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 12,6,2 } };
const TfArray<1, int> outputs1 = { 1, { 13 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 13,9 } };
const TfArray<1, int> outputs2 = { 1, { 14 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 14 } };
const TfArray<1, int> outputs3 = { 1, { 15 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 15,10 } };
const TfArray<1, int> outputs4 = { 1, { 16 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 16,7,3 } };
const TfArray<1, int> outputs5 = { 1, { 17 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 17,11 } };
const TfArray<1, int> outputs6 = { 1, { 18 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 18 } };
const TfArray<1, int> outputs7 = { 1, { 19 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 19,1 } };
const TfArray<1, int> outputs8 = { 1, { 20 } };
const TfLiteFullyConnectedParams opdata9 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs9 = { 3, { 20,5,4 } };
const TfArray<1, int> outputs9 = { 1, { 21 } };
const TfLiteSoftmaxParams opdata10 = { 1 };
const TfArray<1, int> inputs10 = { 1, { 21 } };
const TfArray<1, int> outputs10 = { 1, { 22 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 656, (TfLiteIntArray*)&tensor_dimension0, 650, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 1040, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 312, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension12, 650, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 656, (TfLiteIntArray*)&tensor_dimension13, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension15, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension17, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension19, 208, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 208, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 208, (TfLiteIntArray*)&tensor_dimension21, 5, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 5, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers.push_back(ptr);
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    return kTfLiteError;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 23;
  for(size_t i = 0; i < 23; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for(size_t i = 0; i < 11; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 11; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  22, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 11; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
